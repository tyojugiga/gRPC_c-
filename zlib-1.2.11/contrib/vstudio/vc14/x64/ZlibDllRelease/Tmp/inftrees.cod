; Listing generated by Microsoft (R) Optimizing Compiler Version 19.22.27905.0 

include listing.inc

INCLUDELIB OLDNAMES

	ORG $+10
?dext@?1??inflate_table@@9@9 DW 010H			; `inflate_table'::`2'::dext
	DW	010H
	DW	010H
	DW	010H
	DW	011H
	DW	011H
	DW	012H
	DW	012H
	DW	013H
	DW	013H
	DW	014H
	DW	014H
	DW	015H
	DW	015H
	DW	016H
	DW	016H
	DW	017H
	DW	017H
	DW	018H
	DW	018H
	DW	019H
	DW	019H
	DW	01aH
	DW	01aH
	DW	01bH
	DW	01bH
	DW	01cH
	DW	01cH
	DW	01dH
	DW	01dH
	DW	040H
	DW	040H
?lext@?1??inflate_table@@9@9 DW 010H			; `inflate_table'::`2'::lext
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	011H
	DW	011H
	DW	011H
	DW	011H
	DW	012H
	DW	012H
	DW	012H
	DW	012H
	DW	013H
	DW	013H
	DW	013H
	DW	013H
	DW	014H
	DW	014H
	DW	014H
	DW	014H
	DW	015H
	DW	015H
	DW	015H
	DW	015H
	DW	010H
	DW	04dH
	DW	0caH
	ORG $+2
?lbase@?1??inflate_table@@9@9 DW 03H			; `inflate_table'::`2'::lbase
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0dH
	DW	0fH
	DW	011H
	DW	013H
	DW	017H
	DW	01bH
	DW	01fH
	DW	023H
	DW	02bH
	DW	033H
	DW	03bH
	DW	043H
	DW	053H
	DW	063H
	DW	073H
	DW	083H
	DW	0a3H
	DW	0c3H
	DW	0e3H
	DW	0102H
	DW	00H
	DW	00H
	ORG $+2
?dbase@?1??inflate_table@@9@9 DW 01H			; `inflate_table'::`2'::dbase
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	07H
	DW	09H
	DW	0dH
	DW	011H
	DW	019H
	DW	021H
	DW	031H
	DW	041H
	DW	061H
	DW	081H
	DW	0c1H
	DW	0101H
	DW	0181H
	DW	0201H
	DW	0301H
	DW	0401H
	DW	0601H
	DW	0801H
	DW	0c01H
	DW	01001H
	DW	01801H
	DW	02001H
	DW	03001H
	DW	04001H
	DW	06001H
	DW	00H
	DW	00H
PUBLIC	inflate_table
;	COMDAT pdata
pdata	SEGMENT
$pdata$inflate_table DD imagerel $LN191
	DD	imagerel $LN191+303
	DD	imagerel $unwind$inflate_table
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$inflate_table DD imagerel $LN191+303
	DD	imagerel $LN191+1196
	DD	imagerel $chain$0$inflate_table
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$inflate_table DD imagerel $LN191+1196
	DD	imagerel $LN191+1215
	DD	imagerel $chain$1$inflate_table
;	COMDAT xdata
xdata	SEGMENT
$chain$1$inflate_table DD 021H
	DD	imagerel $LN191
	DD	imagerel $LN191+303
	DD	imagerel $unwind$inflate_table
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$inflate_table DD 020521H
	DD	0f6405H
	DD	imagerel $LN191
	DD	imagerel $LN191+303
	DD	imagerel $unwind$inflate_table
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$inflate_table DD 082301H
	DD	0f019f223H
	DD	0d015e017H
	DD	07011c013H
	DD	0500f3010H
; Function compile flags: /Ogtpy
; File D:\c++\gRPC\zlib-1.2.11\inftrees.c
;	COMDAT inflate_table
_TEXT	SEGMENT
match$1$ = 0
drop$1$ = 4
sym$1$ = 8
tv1827 = 12
mask$1$ = 16
extra$1$ = 24
base$1$ = 32
count$ = 40
offs$ = 72
type$ = 192
lens$ = 200
here$ = 208
codes$ = 208
table$ = 216
bits$ = 224
work$ = 232
inflate_table PROC					; COMDAT

; 39   : {

$LN191:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	55		 push	 rbp
  0000f	53		 push	 rbx
  00010	57		 push	 rdi
  00011	41 54		 push	 r12
  00013	41 55		 push	 r13
  00015	41 56		 push	 r14
  00017	41 57		 push	 r15
  00019	48 8b ec	 mov	 rbp, rsp
  0001c	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H

; 40   :     unsigned len;               /* a code's length in bits */
; 41   :     unsigned sym;               /* index of code symbols */
; 42   :     unsigned min, max;          /* minimum and maximum code lengths */
; 43   :     unsigned root;              /* number of index bits for root table */
; 44   :     unsigned curr;              /* number of index bits for current table */
; 45   :     unsigned drop;              /* code bits to drop for sub-table */
; 46   :     int left;                   /* number of prefix codes available */
; 47   :     unsigned used;              /* code entries in table used */
; 48   :     unsigned huff;              /* Huffman code */
; 49   :     unsigned incr;              /* for incrementing code, index */
; 50   :     unsigned fill;              /* index for replicating entries */
; 51   :     unsigned low;               /* low bits for current root entry */
; 52   :     unsigned mask;              /* mask for low root bits */
; 53   :     code here;                  /* table entry for duplication */
; 54   :     code FAR *next;             /* next available space in table */
; 55   :     const unsigned short FAR *base;     /* base value table to use */
; 56   :     const unsigned short FAR *extra;    /* extra bits table to use */
; 57   :     unsigned match;             /* use base and extra for symbol >= match */
; 58   :     unsigned short count[MAXBITS+1];    /* number of codes of each length */
; 59   :     unsigned short offs[MAXBITS+1];     /* offsets in table for each length */
; 60   :     static const unsigned short lbase[31] = { /* Length codes 257..285 base */
; 61   :         3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
; 62   :         35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
; 63   :     static const unsigned short lext[31] = { /* Length codes 257..285 extra */
; 64   :         16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
; 65   :         19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 77, 202};
; 66   :     static const unsigned short dbase[32] = { /* Distance codes 0..29 base */
; 67   :         1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
; 68   :         257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
; 69   :         8193, 12289, 16385, 24577, 0, 0};
; 70   :     static const unsigned short dext[32] = { /* Distance codes 0..29 extra */
; 71   :         16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
; 72   :         23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
; 73   :         28, 28, 29, 29, 64, 64};
; 74   : 
; 75   :     /*
; 76   :        Process a set of code lengths to create a canonical Huffman code.  The
; 77   :        code lengths are lens[0..codes-1].  Each length corresponds to the
; 78   :        symbols 0..codes-1.  The Huffman code is generated by first sorting the
; 79   :        symbols by length from short to long, and retaining the symbol order
; 80   :        for codes with equal lengths.  Then the code starts with all zero bits
; 81   :        for the first code of the shortest length, and the codes are integer
; 82   :        increments for the same length, and zeros are appended as the length
; 83   :        increases.  For the deflate format, these bits are stored backwards
; 84   :        from their more natural integer increment ordering, and so when the
; 85   :        decoding tables are built in the large loop below, the integer codes
; 86   :        are incremented backwards.
; 87   : 
; 88   :        This routine assumes, but does not check, that all of the entries in
; 89   :        lens[] are in the range 0..MAXBITS.  The caller must assure this.
; 90   :        1..MAXBITS is interpreted as that code length.  zero means that that
; 91   :        symbol does not occur in this code.
; 92   : 
; 93   :        The codes are sorted by computing a count of codes for each length,
; 94   :        creating from that a table of starting indices for each length in the
; 95   :        sorted table, and then entering the symbols in order in the sorted
; 96   :        table.  The sorted table is work[], with that space being provided by
; 97   :        the caller.
; 98   : 
; 99   :        The length counts are used for other purposes as well, i.e. finding
; 100  :        the minimum and maximum length codes, determining if there are any
; 101  :        codes at all, checking for a valid set of lengths, and looking ahead
; 102  :        at length counts to determine sub-table sizes when building the
; 103  :        decoding tables.
; 104  :      */
; 105  : 
; 106  :     /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
; 107  :     for (len = 0; len <= MAXBITS; len++)

  00023	45 33 ed	 xor	 r13d, r13d
  00026	41 8b d8	 mov	 ebx, r8d
  00029	45 0f b7 d5	 movzx	 r10d, r13w
  0002d	4d 8b f1	 mov	 r14, r9
  00030	41 8b c2	 mov	 eax, r10d
  00033	4c 8b fa	 mov	 r15, rdx
  00036	41 c1 e2 10	 shl	 r10d, 16
  0003a	8b f9		 mov	 edi, ecx
  0003c	44 0b d0	 or	 r10d, eax
  0003f	66 41 0f 6e c2	 movd	 xmm0, r10d
  00044	66 0f 70 c0 00	 pshufd	 xmm0, xmm0, 0
  00049	0f 11 45 a8	 movups	 XMMWORD PTR count$[rbp-128], xmm0
  0004d	0f 11 45 b8	 movups	 XMMWORD PTR count$[rbp-112], xmm0

; 108  :         count[len] = 0;
; 109  :     for (sym = 0; sym < codes; sym++)

  00051	45 85 c0	 test	 r8d, r8d
  00054	74 1c		 je	 SHORT $LN6@inflate_ta
  00056	48 8b ca	 mov	 rcx, rdx
  00059	8b d3		 mov	 edx, ebx
  0005b	0f 1f 44 00 00	 npad	 5
$LL7@inflate_ta:

; 110  :         count[lens[sym]]++;

  00060	0f b7 01	 movzx	 eax, WORD PTR [rcx]
  00063	48 8d 49 02	 lea	 rcx, QWORD PTR [rcx+2]
  00067	66 ff 44 45 a8	 inc	 WORD PTR count$[rbp+rax*2-128]
  0006c	48 83 ea 01	 sub	 rdx, 1
  00070	75 ee		 jne	 SHORT $LL7@inflate_ta
$LN6@inflate_ta:

; 111  : 
; 112  :     /* bound code lengths, force root to be within code lengths */
; 113  :     root = *bits;

  00072	4c 8b 55 60	 mov	 r10, QWORD PTR bits$[rbp-128]
  00076	ba 0d 00 00 00	 mov	 edx, 13

; 114  :     for (max = MAXBITS; max >= 1; max--)

  0007b	41 b9 0f 00 00
	00		 mov	 r9d, 15
  00081	45 8b 02	 mov	 r8d, DWORD PTR [r10]
  00084	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL10@inflate_ta:

; 115  :         if (count[max] != 0) break;

  00090	41 8b c1	 mov	 eax, r9d
  00093	41 bc ff ff ff
	ff		 mov	 r12d, -1		; ffffffffH
  00099	66 44 39 6c 45
	a8		 cmp	 WORD PTR count$[rbp+rax*2-128], r13w
  0009f	75 4f		 jne	 SHORT $LN78@inflate_ta
  000a1	8d 42 01	 lea	 eax, DWORD PTR [rdx+1]
  000a4	66 44 39 6c 45
	a8		 cmp	 WORD PTR count$[rbp+rax*2-128], r13w
  000aa	75 41		 jne	 SHORT $LN130@inflate_ta
  000ac	8b c2		 mov	 eax, edx
  000ae	66 44 39 6c 45
	a8		 cmp	 WORD PTR count$[rbp+rax*2-128], r13w
  000b4	75 31		 jne	 SHORT $LN131@inflate_ta
  000b6	8d 42 ff	 lea	 eax, DWORD PTR [rdx-1]
  000b9	66 44 39 6c 45
	a8		 cmp	 WORD PTR count$[rbp+rax*2-128], r13w
  000bf	75 20		 jne	 SHORT $LN132@inflate_ta
  000c1	8d 42 fe	 lea	 eax, DWORD PTR [rdx-2]
  000c4	66 44 39 6c 45
	a8		 cmp	 WORD PTR count$[rbp+rax*2-128], r13w
  000ca	75 0f		 jne	 SHORT $LN133@inflate_ta

; 114  :     for (max = MAXBITS; max >= 1; max--)

  000cc	41 83 c1 fb	 add	 r9d, -5			; fffffffbH
  000d0	83 c2 fb	 add	 edx, -5			; fffffffbH
  000d3	41 83 f9 01	 cmp	 r9d, 1
  000d7	73 b7		 jae	 SHORT $LL10@inflate_ta
  000d9	eb 15		 jmp	 SHORT $LN78@inflate_ta
$LN133@inflate_ta:

; 115  :         if (count[max] != 0) break;

  000db	41 83 c1 fc	 add	 r9d, -4			; fffffffcH
  000df	eb 0f		 jmp	 SHORT $LN78@inflate_ta
$LN132@inflate_ta:
  000e1	41 83 c1 fd	 add	 r9d, -3			; fffffffdH
  000e5	eb 09		 jmp	 SHORT $LN78@inflate_ta
$LN131@inflate_ta:
  000e7	41 83 c1 fe	 add	 r9d, -2			; fffffffeH
  000eb	eb 03		 jmp	 SHORT $LN78@inflate_ta
$LN130@inflate_ta:
  000ed	45 03 cc	 add	 r9d, r12d
$LN78@inflate_ta:

; 116  :     if (root > max) root = max;
; 117  :     if (max == 0) {                     /* no symbols to code at all */

  000f0	45 3b c1	 cmp	 r8d, r9d
  000f3	41 8b c9	 mov	 ecx, r9d
  000f6	41 0f 46 c8	 cmovbe	 ecx, r8d
  000fa	45 85 c9	 test	 r9d, r9d
  000fd	75 2a		 jne	 SHORT $LN37@inflate_ta

; 118  :         here.op = (unsigned char)64;    /* invalid code marker */
; 119  :         here.bits = (unsigned char)1;
; 120  :         here.val = (unsigned short)0;
; 121  :         *(*table)++ = here;             /* make a table to force an error */

  000ff	49 8b 0e	 mov	 rcx, QWORD PTR [r14]
  00102	c7 45 50 40 01
	00 00		 mov	 DWORD PTR here$[rbp-128], 320 ; 00000140H
  00109	8b 45 50	 mov	 eax, DWORD PTR here$[rbp-128]
  0010c	89 01		 mov	 DWORD PTR [rcx], eax
  0010e	49 83 06 04	 add	 QWORD PTR [r14], 4
  00112	49 8b 0e	 mov	 rcx, QWORD PTR [r14]
  00115	89 01		 mov	 DWORD PTR [rcx], eax
  00117	49 83 06 04	 add	 QWORD PTR [r14], 4

; 122  :         *(*table)++ = here;
; 123  :         *bits = 1;
; 124  :         return 0;     /* no symbols, but wait for decoding to report error */

  0011b	33 c0		 xor	 eax, eax
  0011d	41 c7 02 01 00
	00 00		 mov	 DWORD PTR [r10], 1
  00124	e9 83 03 00 00	 jmp	 $LN1@inflate_ta
$LN37@inflate_ta:

; 125  :     }
; 126  :     for (min = 1; min < max; min++)

  00129	41 bb 01 00 00
	00		 mov	 r11d, 1
  0012f	48 89 74 24 78	 mov	 QWORD PTR [rsp+120], rsi
  00134	45 3b cb	 cmp	 r9d, r11d
  00137	76 19		 jbe	 SHORT $LN178@inflate_ta

; 147  :         if (lens[sym] != 0) work[offs[lens[sym]]++] = (unsigned short)sym;

  00139	48 8d 45 aa	 lea	 rax, QWORD PTR count$[rbp-126]
  0013d	0f 1f 00	 npad	 3
$LL13@inflate_ta:

; 127  :         if (count[min] != 0) break;

  00140	66 44 39 28	 cmp	 WORD PTR [rax], r13w
  00144	75 0c		 jne	 SHORT $LN178@inflate_ta

; 125  :     }
; 126  :     for (min = 1; min < max; min++)

  00146	41 ff c3	 inc	 r11d
  00149	48 83 c0 02	 add	 rax, 2
  0014d	45 3b d9	 cmp	 r11d, r9d
  00150	72 ee		 jb	 SHORT $LL13@inflate_ta
$LN178@inflate_ta:

; 128  :     if (root < min) root = min;
; 129  : 
; 130  :     /* check for an over-subscribed or incomplete set of lengths */
; 131  :     left = 1;

  00152	41 3b cb	 cmp	 ecx, r11d
  00155	41 8b f3	 mov	 esi, r11d

; 132  :     for (len = 1; len <= MAXBITS; len++) {

  00158	ba 01 00 00 00	 mov	 edx, 1
  0015d	0f 43 f1	 cmovae	 esi, ecx
  00160	44 8b c2	 mov	 r8d, edx
  00163	89 75 8c	 mov	 DWORD PTR tv1827[rbp-128], esi
  00166	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL16@inflate_ta:

; 133  :         left <<= 1;
; 134  :         left -= count[len];

  00170	8b c2		 mov	 eax, edx
  00172	45 03 c0	 add	 r8d, r8d
  00175	0f b7 4c 45 a8	 movzx	 ecx, WORD PTR count$[rbp+rax*2-128]
  0017a	44 2b c1	 sub	 r8d, ecx

; 135  :         if (left < 0) return -1;        /* over-subscribed */

  0017d	0f 88 1f 03 00
	00		 js	 $LN42@inflate_ta

; 132  :     for (len = 1; len <= MAXBITS; len++) {

  00183	ff c2		 inc	 edx
  00185	83 fa 0f	 cmp	 edx, 15
  00188	76 e6		 jbe	 SHORT $LL16@inflate_ta

; 136  :     }
; 137  :     if (left > 0 && (type == CODES || max != 1))

  0018a	45 85 c0	 test	 r8d, r8d
  0018d	7e 12		 jle	 SHORT $LN41@inflate_ta
  0018f	85 ff		 test	 edi, edi
  00191	0f 84 0b 03 00
	00		 je	 $LN42@inflate_ta
  00197	41 83 f9 01	 cmp	 r9d, 1
  0019b	0f 85 01 03 00
	00		 jne	 $LN42@inflate_ta
$LN41@inflate_ta:

; 139  : 
; 140  :     /* generate offsets into symbol table for each length for sorting */
; 141  :     offs[1] = 0;

  001a1	66 44 89 6d ca	 mov	 WORD PTR offs$[rbp-126], r13w
  001a6	49 8b cd	 mov	 rcx, r13
  001a9	ba 0e 00 00 00	 mov	 edx, 14
  001ae	66 90		 npad	 2
$LL19@inflate_ta:

; 142  :     for (len = 1; len < MAXBITS; len++)
; 143  :         offs[len + 1] = offs[len] + count[len];

  001b0	0f b7 44 0d aa	 movzx	 eax, WORD PTR count$[rbp+rcx-126]
  001b5	66 03 44 0d ca	 add	 ax, WORD PTR offs$[rbp+rcx-126]
  001ba	66 89 44 0d cc	 mov	 WORD PTR offs$[rbp+rcx-124], ax
  001bf	48 8d 49 02	 lea	 rcx, QWORD PTR [rcx+2]
  001c3	48 83 ea 01	 sub	 rdx, 1
  001c7	75 e7		 jne	 SHORT $LL19@inflate_ta

; 144  : 
; 145  :     /* sort symbols by length, by symbol order within each length */
; 146  :     for (sym = 0; sym < codes; sym++)

  001c9	45 8b c5	 mov	 r8d, r13d
  001cc	85 db		 test	 ebx, ebx
  001ce	74 2d		 je	 SHORT $LN21@inflate_ta
  001d0	4c 8b 55 68	 mov	 r10, QWORD PTR work$[rbp-128]
  001d4	49 8b d7	 mov	 rdx, r15
$LL22@inflate_ta:

; 147  :         if (lens[sym] != 0) work[offs[lens[sym]]++] = (unsigned short)sym;

  001d7	0f b7 02	 movzx	 eax, WORD PTR [rdx]
  001da	66 85 c0	 test	 ax, ax
  001dd	74 12		 je	 SHORT $LN20@inflate_ta
  001df	0f b7 4c 45 c8	 movzx	 ecx, WORD PTR offs$[rbp+rax*2-128]
  001e4	66 45 89 04 4a	 mov	 WORD PTR [r10+rcx*2], r8w
  001e9	0f b7 02	 movzx	 eax, WORD PTR [rdx]
  001ec	66 ff 44 45 c8	 inc	 WORD PTR offs$[rbp+rax*2-128]
$LN20@inflate_ta:

; 144  : 
; 145  :     /* sort symbols by length, by symbol order within each length */
; 146  :     for (sym = 0; sym < codes; sym++)

  001f1	41 ff c0	 inc	 r8d
  001f4	48 83 c2 02	 add	 rdx, 2
  001f8	44 3b c3	 cmp	 r8d, ebx
  001fb	72 da		 jb	 SHORT $LL22@inflate_ta
$LN21@inflate_ta:

; 148  : 
; 149  :     /*
; 150  :        Create and fill in decoding tables.  In this loop, the table being
; 151  :        filled is at next and has curr index bits.  The code being used is huff
; 152  :        with length len.  That code is converted to an index by dropping drop
; 153  :        bits off of the bottom.  For codes where len is less than drop + curr,
; 154  :        those top drop + curr - len bits are incremented through all values to
; 155  :        fill the table with replicated entries.
; 156  : 
; 157  :        root is the number of index bits for the root table.  When len exceeds
; 158  :        root, sub-tables are created pointed to by the root entry with an index
; 159  :        of the low root bits of huff.  This is saved in low to check for when a
; 160  :        new sub-table should be started.  drop is zero when the root table is
; 161  :        being filled, and drop is root when sub-tables are being filled.
; 162  : 
; 163  :        When a new sub-table is needed, it is necessary to look ahead in the
; 164  :        code lengths to determine what size sub-table is needed.  The length
; 165  :        counts are used for this, and so count[] is decremented as codes are
; 166  :        entered in the tables.
; 167  : 
; 168  :        used keeps track of how many table entries have been allocated from the
; 169  :        provided *table space.  It is checked for LENS and DIST tables against
; 170  :        the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
; 171  :        the initial root table size constants.  See the comments in inftrees.h
; 172  :        for more information.
; 173  : 
; 174  :        sym increments through all symbols, and the loop terminates when
; 175  :        all codes of length max, i.e. all codes, have been processed.  This
; 176  :        routine permits incomplete codes, so another loop after this one fills
; 177  :        in the rest of the decoding tables with invalid code markers.
; 178  :      */
; 179  : 
; 180  :     /* set up for code type */
; 181  :     switch (type) {

  001fd	4c 8b 45 68	 mov	 r8, QWORD PTR work$[rbp-128]
  00201	85 ff		 test	 edi, edi
  00203	74 3d		 je	 SHORT $LN44@inflate_ta
  00205	83 ff 01	 cmp	 edi, 1
  00208	74 1b		 je	 SHORT $LN45@inflate_ta

; 191  :     default:    /* DISTS */
; 192  :         base = dbase;

  0020a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?dbase@?1??inflate_table@@9@9

; 193  :         extra = dext;
; 194  :         match = 0;

  00211	41 8b d5	 mov	 edx, r13d
  00214	48 89 45 a0	 mov	 QWORD PTR base$1$[rbp-128], rax
  00218	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?dext@?1??inflate_table@@9@9
  0021f	48 89 45 98	 mov	 QWORD PTR extra$1$[rbp-128], rax
  00223	eb 2a		 jmp	 SHORT $LN187@inflate_ta
$LN45@inflate_ta:

; 185  :         break;
; 186  :     case LENS:
; 187  :         base = lbase;

  00225	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?lbase@?1??inflate_table@@9@9

; 188  :         extra = lext;
; 189  :         match = 257;

  0022c	ba 01 01 00 00	 mov	 edx, 257		; 00000101H
  00231	48 89 45 a0	 mov	 QWORD PTR base$1$[rbp-128], rax
  00235	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?lext@?1??inflate_table@@9@9
  0023c	48 89 45 98	 mov	 QWORD PTR extra$1$[rbp-128], rax

; 190  :         break;

  00240	eb 0d		 jmp	 SHORT $LN187@inflate_ta
$LN44@inflate_ta:

; 182  :     case CODES:
; 183  :         base = extra = work;    /* dummy value--not used */

  00242	4c 89 45 98	 mov	 QWORD PTR extra$1$[rbp-128], r8

; 184  :         match = 20;

  00246	ba 14 00 00 00	 mov	 edx, 20
  0024b	4c 89 45 a0	 mov	 QWORD PTR base$1$[rbp-128], r8
$LN187@inflate_ta:

; 195  :     }
; 196  : 
; 197  :     /* initialize state for loop */
; 198  :     huff = 0;                   /* starting code */
; 199  :     sym = 0;                    /* starting code symbol */
; 200  :     len = min;                  /* starting code length */
; 201  :     next = *table;              /* current table to fill in */

  0024f	4d 8b 3e	 mov	 r15, QWORD PTR [r14]

; 202  :     curr = root;                /* current table index bits */
; 203  :     drop = 0;                   /* current bits to drop from code for index */
; 204  :     low = (unsigned)(-1);       /* trigger new sub-table when len > root */
; 205  :     used = 1U << root;          /* use root table entries */

  00252	8b ce		 mov	 ecx, esi

; 206  :     mask = used - 1;            /* mask for comparing low */
; 207  : 
; 208  :     /* check available table space */
; 209  :     if ((type == LENS && used > ENOUGH_LENS) ||

  00254	44 8b 75 40	 mov	 r14d, DWORD PTR type$[rbp-128]
  00258	be 01 00 00 00	 mov	 esi, 1
  0025d	d3 e6		 shl	 esi, cl
  0025f	41 8b dd	 mov	 ebx, r13d
  00262	44 89 6d 88	 mov	 DWORD PTR sym$1$[rbp-128], r13d
  00266	45 8b d5	 mov	 r10d, r13d
  00269	44 89 6d 84	 mov	 DWORD PTR drop$1$[rbp-128], r13d
  0026d	41 8b fd	 mov	 edi, r13d
  00270	89 55 80	 mov	 DWORD PTR match$1$[rbp-128], edx
  00273	44 8b ee	 mov	 r13d, esi
  00276	8d 46 ff	 lea	 eax, DWORD PTR [rsi-1]
  00279	89 45 90	 mov	 DWORD PTR mask$1$[rbp-128], eax
  0027c	41 83 fe 01	 cmp	 r14d, 1
  00280	75 12		 jne	 SHORT $LN49@inflate_ta
  00282	81 fe 54 03 00
	00		 cmp	 esi, 852		; 00000354H
  00288	76 29		 jbe	 SHORT $LL25@inflate_ta
$LN62@inflate_ta:

; 279  :                 (type == DISTS && used > ENOUGH_DISTS))
; 280  :                 return 1;

  0028a	b8 01 00 00 00	 mov	 eax, 1
  0028f	e9 13 02 00 00	 jmp	 $LN186@inflate_ta
$LN49@inflate_ta:

; 206  :     mask = used - 1;            /* mask for comparing low */
; 207  : 
; 208  :     /* check available table space */
; 209  :     if ((type == LENS && used > ENOUGH_LENS) ||

  00294	41 83 fe 02	 cmp	 r14d, 2
  00298	75 19		 jne	 SHORT $LL25@inflate_ta
  0029a	81 fe 50 02 00
	00		 cmp	 esi, 592		; 00000250H
  002a0	77 e8		 ja	 SHORT $LN62@inflate_ta

; 255  :         }
; 256  : 
; 257  :         /* create new sub-table if needed */
; 258  :         if (len > root && (huff & mask) != low) {

  002a2	eb 0f		 jmp	 SHORT $LL25@inflate_ta
  002a4	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL181@inflate_ta:

; 210  :         (type == DISTS && used > ENOUGH_DISTS))
; 211  :         return 1;
; 212  : 
; 213  :     /* process all codes and make table entries */
; 214  :     for (;;) {
; 215  :         /* create table entry */
; 216  :         here.bits = (unsigned char)(len - drop);

  002b0	8b 7d 84	 mov	 edi, DWORD PTR drop$1$[rbp-128]
$LL25@inflate_ta:
  002b3	41 0f b6 c3	 movzx	 eax, r11b
  002b7	40 2a c7	 sub	 al, dil
  002ba	88 45 51	 mov	 BYTE PTR here$[rbp-127], al

; 217  :         if (work[sym] + 1U < match) {

  002bd	41 8b c2	 mov	 eax, r10d
  002c0	41 0f b7 0c 40	 movzx	 ecx, WORD PTR [r8+rax*2]
  002c5	8d 41 01	 lea	 eax, DWORD PTR [rcx+1]
  002c8	3b c2		 cmp	 eax, edx
  002ca	73 0a		 jae	 SHORT $LN50@inflate_ta

; 218  :             here.op = (unsigned char)0;

  002cc	c6 45 50 00	 mov	 BYTE PTR here$[rbp-128], 0

; 219  :             here.val = work[sym];

  002d0	66 89 4d 52	 mov	 WORD PTR here$[rbp-126], cx

; 220  :         }

  002d4	eb 28		 jmp	 SHORT $LN53@inflate_ta
$LN50@inflate_ta:

; 221  :         else if (work[sym] >= match) {

  002d6	3b ca		 cmp	 ecx, edx
  002d8	72 1a		 jb	 SHORT $LN52@inflate_ta

; 222  :             here.op = (unsigned char)(extra[work[sym] - match]);

  002da	48 8b 45 98	 mov	 rax, QWORD PTR extra$1$[rbp-128]
  002de	2b ca		 sub	 ecx, edx
  002e0	48 03 c9	 add	 rcx, rcx
  002e3	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  002e7	88 45 50	 mov	 BYTE PTR here$[rbp-128], al

; 223  :             here.val = base[work[sym] - match];

  002ea	48 8b 45 a0	 mov	 rax, QWORD PTR base$1$[rbp-128]
  002ee	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]

; 224  :         }

  002f2	eb 06		 jmp	 SHORT $LN188@inflate_ta
$LN52@inflate_ta:

; 225  :         else {
; 226  :             here.op = (unsigned char)(32 + 64);         /* end of block */

  002f4	c6 45 50 60	 mov	 BYTE PTR here$[rbp-128], 96 ; 00000060H

; 227  :             here.val = 0;

  002f8	33 c0		 xor	 eax, eax
$LN188@inflate_ta:

; 228  :         }
; 229  : 
; 230  :         /* replicate for those indices with low len bits equal to huff */
; 231  :         incr = 1U << (len - drop);

  002fa	66 89 45 52	 mov	 WORD PTR here$[rbp-126], ax
$LN53@inflate_ta:
  002fe	8b 45 50	 mov	 eax, DWORD PTR here$[rbp-128]
  00301	41 8b cb	 mov	 ecx, r11d
  00304	2b cf		 sub	 ecx, edi

; 232  :         fill = 1U << curr;

  00306	44 8b c6	 mov	 r8d, esi
  00309	41 ba 01 00 00
	00		 mov	 r10d, 1
  0030f	8b d3		 mov	 edx, ebx
  00311	41 d3 e2	 shl	 r10d, cl
  00314	8b cf		 mov	 ecx, edi
  00316	d3 ea		 shr	 edx, cl
  00318	03 d6		 add	 edx, esi
  0031a	66 0f 1f 44 00
	00		 npad	 6
$LL30@inflate_ta:

; 233  :         min = fill;                 /* save offset to next table */
; 234  :         do {
; 235  :             fill -= incr;

  00320	41 2b d2	 sub	 edx, r10d

; 236  :             next[(huff >> drop) + fill] = here;

  00323	41 89 04 97	 mov	 DWORD PTR [r15+rdx*4], eax
  00327	45 2b c2	 sub	 r8d, r10d

; 237  :         } while (fill != 0);

  0032a	75 f4		 jne	 SHORT $LL30@inflate_ta

; 238  : 
; 239  :         /* backwards increment the len-bit code huff */
; 240  :         incr = 1U << (len - 1);

  0032c	41 8d 4b ff	 lea	 ecx, DWORD PTR [r11-1]
  00330	ba 01 00 00 00	 mov	 edx, 1
  00335	d3 e2		 shl	 edx, cl

; 241  :         while (huff & incr)

  00337	85 d3		 test	 edx, ebx
  00339	74 0b		 je	 SHORT $LN32@inflate_ta
  0033b	0f 1f 44 00 00	 npad	 5
$LL31@inflate_ta:

; 242  :             incr >>= 1;

  00340	d1 ea		 shr	 edx, 1
  00342	85 d3		 test	 edx, ebx
  00344	75 fa		 jne	 SHORT $LL31@inflate_ta
$LN32@inflate_ta:

; 243  :         if (incr != 0) {

  00346	85 d2		 test	 edx, edx
  00348	74 0b		 je	 SHORT $LN54@inflate_ta

; 244  :             huff &= incr - 1;

  0034a	8d 42 ff	 lea	 eax, DWORD PTR [rdx-1]
  0034d	23 d8		 and	 ebx, eax

; 245  :             huff += incr;

  0034f	03 da		 add	 ebx, edx

; 246  :         }

  00351	33 c9		 xor	 ecx, ecx
  00353	eb 04		 jmp	 SHORT $LN55@inflate_ta
$LN54@inflate_ta:

; 247  :         else
; 248  :             huff = 0;

  00355	33 c9		 xor	 ecx, ecx
  00357	8b d9		 mov	 ebx, ecx
$LN55@inflate_ta:

; 249  : 
; 250  :         /* go to next symbol, update count, len */
; 251  :         sym++;

  00359	44 8b 55 88	 mov	 r10d, DWORD PTR sym$1$[rbp-128]

; 252  :         if (--(count[len]) == 0) {

  0035d	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00362	41 ff c2	 inc	 r10d
  00365	41 8b c3	 mov	 eax, r11d
  00368	44 89 55 88	 mov	 DWORD PTR sym$1$[rbp-128], r10d
  0036c	66 01 54 45 a8	 add	 WORD PTR count$[rbp+rax*2-128], dx
  00371	75 1d		 jne	 SHORT $LN180@inflate_ta

; 253  :             if (len == max) break;

  00373	45 3b d9	 cmp	 r11d, r9d
  00376	0f 84 f6 00 00
	00		 je	 $LN82@inflate_ta

; 254  :             len = lens[work[sym]];

  0037c	4c 8b 45 68	 mov	 r8, QWORD PTR work$[rbp-128]
  00380	48 8b 45 48	 mov	 rax, QWORD PTR lens$[rbp-128]
  00384	43 0f b7 0c 50	 movzx	 ecx, WORD PTR [r8+r10*2]
  00389	44 0f b7 1c 48	 movzx	 r11d, WORD PTR [rax+rcx*2]
  0038e	eb 04		 jmp	 SHORT $LN56@inflate_ta
$LN180@inflate_ta:

; 252  :         if (--(count[len]) == 0) {

  00390	4c 8b 45 68	 mov	 r8, QWORD PTR work$[rbp-128]
$LN56@inflate_ta:

; 255  :         }
; 256  : 
; 257  :         /* create new sub-table if needed */
; 258  :         if (len > root && (huff & mask) != low) {

  00394	8b 45 8c	 mov	 eax, DWORD PTR tv1827[rbp-128]
  00397	8b 55 80	 mov	 edx, DWORD PTR match$1$[rbp-128]
  0039a	44 3b d8	 cmp	 r11d, eax
  0039d	0f 86 10 ff ff
	ff		 jbe	 $LL25@inflate_ta
  003a3	8b 7d 90	 mov	 edi, DWORD PTR mask$1$[rbp-128]
  003a6	23 fb		 and	 edi, ebx
  003a8	41 3b fc	 cmp	 edi, r12d
  003ab	0f 84 ff fe ff
	ff		 je	 $LL181@inflate_ta

; 259  :             /* if first time, transition to sub-tables */
; 260  :             if (drop == 0)
; 261  :                 drop = root;
; 262  : 
; 263  :             /* increment past last table */
; 264  :             next += min;            /* here min is 1 << curr */

  003b1	8b 4d 84	 mov	 ecx, DWORD PTR drop$1$[rbp-128]
  003b4	4d 8d 3c b7	 lea	 r15, QWORD PTR [r15+rsi*4]
  003b8	85 c9		 test	 ecx, ecx

; 265  : 
; 266  :             /* determine length of next table */
; 267  :             curr = len - drop;

  003ba	45 8b d3	 mov	 r10d, r11d

; 268  :             left = (int)(1 << curr);

  003bd	ba 01 00 00 00	 mov	 edx, 1
  003c2	0f 45 c1	 cmovne	 eax, ecx
  003c5	44 2b d0	 sub	 r10d, eax
  003c8	89 45 84	 mov	 DWORD PTR drop$1$[rbp-128], eax
  003cb	41 8b ca	 mov	 ecx, r10d
  003ce	d3 e2		 shl	 edx, cl

; 269  :             while (curr + drop < max) {

  003d0	45 3b d9	 cmp	 r11d, r9d
  003d3	73 26		 jae	 SHORT $LN179@inflate_ta

; 259  :             /* if first time, transition to sub-tables */
; 260  :             if (drop == 0)
; 261  :                 drop = root;
; 262  : 
; 263  :             /* increment past last table */
; 264  :             next += min;            /* here min is 1 << curr */

  003d5	45 8b c3	 mov	 r8d, r11d
  003d8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL33@inflate_ta:

; 270  :                 left -= count[curr + drop];

  003e0	41 8b c0	 mov	 eax, r8d
  003e3	0f b7 4c 45 a8	 movzx	 ecx, WORD PTR count$[rbp+rax*2-128]
  003e8	2b d1		 sub	 edx, ecx

; 271  :                 if (left <= 0) break;

  003ea	85 d2		 test	 edx, edx
  003ec	7e 0d		 jle	 SHORT $LN179@inflate_ta

; 272  :                 curr++;

  003ee	41 ff c2	 inc	 r10d
  003f1	41 ff c0	 inc	 r8d

; 273  :                 left <<= 1;

  003f4	03 d2		 add	 edx, edx
  003f6	45 3b c1	 cmp	 r8d, r9d
  003f9	72 e5		 jb	 SHORT $LL33@inflate_ta
$LN179@inflate_ta:

; 274  :             }
; 275  : 
; 276  :             /* check for enough space */
; 277  :             used += 1U << curr;
; 278  :             if ((type == LENS && used > ENOUGH_LENS) ||

  003fb	44 8b 75 40	 mov	 r14d, DWORD PTR type$[rbp-128]
  003ff	41 8b ca	 mov	 ecx, r10d
  00402	be 01 00 00 00	 mov	 esi, 1
  00407	d3 e6		 shl	 esi, cl
  00409	44 03 ee	 add	 r13d, esi
  0040c	41 83 fe 01	 cmp	 r14d, 1
  00410	75 09		 jne	 SHORT $LN63@inflate_ta
  00412	41 81 fd 54 03
	00 00		 cmp	 r13d, 852		; 00000354H
  00419	eb 0d		 jmp	 SHORT $LN189@inflate_ta
$LN63@inflate_ta:
  0041b	41 83 fe 02	 cmp	 r14d, 2
  0041f	75 0d		 jne	 SHORT $LN61@inflate_ta
  00421	41 81 fd 50 02
	00 00		 cmp	 r13d, 592		; 00000250H
$LN189@inflate_ta:

; 281  : 
; 282  :             /* point entry in root table to sub-table */
; 283  :             low = huff & mask;

  00428	0f 87 5c fe ff
	ff		 ja	 $LN62@inflate_ta
$LN61@inflate_ta:

; 284  :             (*table)[low].op = (unsigned char)curr;

  0042e	48 8b 4d 58	 mov	 rcx, QWORD PTR table$[rbp-128]
  00432	48 8d 14 bd 00
	00 00 00	 lea	 rdx, QWORD PTR [rdi*4]

; 285  :             (*table)[low].bits = (unsigned char)root;

  0043a	44 8b 45 8c	 mov	 r8d, DWORD PTR tv1827[rbp-128]
  0043e	44 8b e7	 mov	 r12d, edi
  00441	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00444	44 88 14 02	 mov	 BYTE PTR [rdx+rax], r10b
  00448	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 286  :             (*table)[low].val = (unsigned short)(next - *table);
; 287  :         }
; 288  :     }

  0044b	44 8b 55 88	 mov	 r10d, DWORD PTR sym$1$[rbp-128]
  0044f	44 88 44 02 01	 mov	 BYTE PTR [rdx+rax+1], r8b
  00454	49 8b c7	 mov	 rax, r15
  00457	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0045a	4c 8b 45 68	 mov	 r8, QWORD PTR work$[rbp-128]
  0045e	48 2b c1	 sub	 rax, rcx
  00461	48 c1 f8 02	 sar	 rax, 2
  00465	66 89 44 11 02	 mov	 WORD PTR [rcx+rdx+2], ax
  0046a	8b 55 80	 mov	 edx, DWORD PTR match$1$[rbp-128]
  0046d	e9 3e fe ff ff	 jmp	 $LL181@inflate_ta
$LN82@inflate_ta:

; 289  : 
; 290  :     /* fill in remaining table entry if code is incomplete (guaranteed to have
; 291  :        at most one remaining entry, since if the code is incomplete, the
; 292  :        maximum code length that was allowed to get this far is one bit) */
; 293  :     if (huff != 0) {

  00472	85 db		 test	 ebx, ebx
  00474	74 11		 je	 SHORT $LN64@inflate_ta

; 294  :         here.op = (unsigned char)64;            /* invalid code marker */
; 295  :         here.bits = (unsigned char)(len - drop);
; 296  :         here.val = (unsigned short)0;

  00476	66 89 4d 52	 mov	 WORD PTR here$[rbp-126], cx

; 297  :         next[huff] = here;

  0047a	8b cb		 mov	 ecx, ebx
  0047c	c6 45 50 40	 mov	 BYTE PTR here$[rbp-128], 64 ; 00000040H
  00480	8b 45 50	 mov	 eax, DWORD PTR here$[rbp-128]
  00483	41 89 04 8f	 mov	 DWORD PTR [r15+rcx*4], eax
$LN64@inflate_ta:

; 298  :     }
; 299  : 
; 300  :     /* set return parameters */
; 301  :     *table += used;

  00487	48 8b 4d 58	 mov	 rcx, QWORD PTR table$[rbp-128]
  0048b	41 8b c5	 mov	 eax, r13d
  0048e	48 c1 e0 02	 shl	 rax, 2
  00492	48 01 01	 add	 QWORD PTR [rcx], rax

; 302  :     *bits = root;

  00495	8b 45 8c	 mov	 eax, DWORD PTR tv1827[rbp-128]
  00498	48 8b 4d 60	 mov	 rcx, QWORD PTR bits$[rbp-128]
  0049c	89 01		 mov	 DWORD PTR [rcx], eax

; 303  :     return 0;

  0049e	33 c0		 xor	 eax, eax
  004a0	eb 05		 jmp	 SHORT $LN186@inflate_ta
$LN42@inflate_ta:

; 138  :         return -1;                      /* incomplete set */

  004a2	b8 ff ff ff ff	 mov	 eax, -1
$LN186@inflate_ta:
  004a7	48 8b 74 24 78	 mov	 rsi, QWORD PTR [rsp+120]
$LN1@inflate_ta:

; 304  : }

  004ac	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  004b3	41 5f		 pop	 r15
  004b5	41 5e		 pop	 r14
  004b7	41 5d		 pop	 r13
  004b9	41 5c		 pop	 r12
  004bb	5f		 pop	 rdi
  004bc	5b		 pop	 rbx
  004bd	5d		 pop	 rbp
  004be	c3		 ret	 0
inflate_table ENDP
_TEXT	ENDS
END
